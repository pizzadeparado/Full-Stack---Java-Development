package com.codeoftheweb.salvo;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AnonymousAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.web.bind.annotation.*;import java.util.*;import java.util.stream.*;@RestController@RequestMapping("/api")public class SalvoController {  @Autowired  private GameRepository gameRepository;  @Autowired  private GamePlayerRepository gamePlayerRepository;  @Autowired  private PlayerRepository playerRepository;  @Autowired  private ShipRepository shipRepository;  @Autowired  PasswordEncoder passwordEncoder;  private Map<String, Object> makeMap(String key, Object value) {    Map<String, Object> map = new HashMap<>();    map.put(key, value);    return map;  }  //---------------------------------------- api/games ----------------------------------------//  @RequestMapping("/games")  public Map<String, Object> getGames(Authentication authentication) {    Map<String, Object> dto = new HashMap<>();    if (!this.Guest(authentication)) {      dto.put("player", playerRepository.findByUserName(authentication.getName()).createPlayerDTO());    } else {      dto.put("player", "guest");    }    dto.put("games", gameRepository        .findAll()        .stream()        .map(Game::createGameDTO)        .collect(Collectors.toList()));    return dto;  }  private boolean Guest(Authentication authentication) {    return authentication == null || authentication instanceof AnonymousAuthenticationToken;  }  @RequestMapping(path = "/games", method = RequestMethod.POST)  @ResponseBody  public ResponseEntity<Object> createGame(Authentication authentication) {    ResponseEntity<Object> response;    if (!authentication.isAuthenticated()) {      response = new ResponseEntity<>(makeMap("error", "Not authenticated"), HttpStatus.FORBIDDEN);    }    Player player = playerRepository.findByUserName(authentication.getName());    if (player != null) {      Game newGame = gameRepository.save(new Game(new Date()));      GamePlayer newGamePlayer;      newGamePlayer = new GamePlayer(player, newGame, new Date());      gamePlayerRepository.save(newGamePlayer);      response = new ResponseEntity<>(makeMap("gamePlayerID", newGamePlayer.getGamePlayerID()), HttpStatus.CREATED);    } else {      response = new ResponseEntity<>(makeMap("Error", "No User Found"), HttpStatus.FORBIDDEN);    }    return response;  }  @RequestMapping(path = "/games/{gameID}/player", method = RequestMethod.POST)  @ResponseBody  public ResponseEntity<Object> joinGame(Authentication authentication, @PathVariable Long gameID) {    Game game = gameRepository.findById(gameID).orElse(null);    if (game == null) {      return new ResponseEntity<>(makeMap("error", "The game doesn't exist."),          HttpStatus.FORBIDDEN);    }    if (Guest(authentication)) {      return new ResponseEntity<>(makeMap("error", "No player logged in."), HttpStatus.FORBIDDEN);    }    if (game.getGamePlayer().stream().count() > 1) {      return new ResponseEntity<>(makeMap("error", "Game is full. Try another."),          HttpStatus.FORBIDDEN);    }    if (game.getGamePlayer().stream().map(gamePlayer -> gamePlayer.getPlayer().getUserName()).collect(Collectors.toList()).contains(authentication.getName())) {      return new ResponseEntity<>(makeMap("error", "You can't play against yourself!"),          HttpStatus.FORBIDDEN);    }    Player player = playerRepository.findByUserName(authentication.getName());    GamePlayer gamePlayer = new GamePlayer(player, game);    gamePlayerRepository.save(gamePlayer);    return new ResponseEntity<>(makeMap("success", "Starting game..."), HttpStatus.ACCEPTED);  }  @RequestMapping("/games/player/{gamePlayerID}/ships")  @ResponseBody  public ResponseEntity<Object> placeShips(Authentication authentication) {    ResponseEntity<Object> response;    Ship ship = shipRepository.findById(gameID).orElse(null);    if (Guest(authentication)) {      return new ResponseEntity<>(makeMap("error", "No player logged in."), HttpStatus.FORBIDDEN);    }    if ()    return new ResponseEntity<>(makeMap("success", "Ships placed"), HttpStatus.ACCEPTED);  }  //---------------------------------------- api/players ----------------------------------------//  @RequestMapping(path = "/players", method = RequestMethod.POST)  public ResponseEntity<String> registration(@RequestParam String username, @RequestParam String password) {    if (username.isEmpty()) {      return new ResponseEntity<>("You have to choose a username.", HttpStatus.FORBIDDEN);    }    if (playerRepository.findByUserName(username) != null) {      return new ResponseEntity<>("Username already taken.", HttpStatus.CONFLICT);    }    Player newPlayer = playerRepository.save(new Player(username, passwordEncoder.encode(password)));    return new ResponseEntity<>(newPlayer.getUserName(), HttpStatus.CREATED);  }  //---------------------------------------- api/game_view ----------------------------------------//  @RequestMapping("/game_view/{gamePlayerID}")  public ResponseEntity<Map<String, Object>> getGameView(@PathVariable Long gamePlayerID, Authentication authentication) {    if (!authentication.isAuthenticated()) {      return new ResponseEntity<>(makeMap("error", ""), HttpStatus.FORBIDDEN);    }    GamePlayer gamePlayer = gamePlayerRepository.getOne(gamePlayerID);    if (!gamePlayer.getPlayer().getUserName().equals(authentication.getName())) {      return new ResponseEntity<>(makeMap("error", ""), HttpStatus.FORBIDDEN);    }    Map<String, Object> dto = gamePlayer.getGame().createGameDTO();    dto.put("ship", gamePlayer        .getShip()        .stream()        .map(Ship::createShipDTO));    dto.put("salvo", gamePlayer        .getGame()        .getGamePlayer()        .stream()        .flatMap(gp -> gp.getSalvo().stream().map(Salvo::createSalvoDTO))        .collect(Collectors.toList()));    return new ResponseEntity<>(dto, HttpStatus.CREATED);  }  //---------------------------------------- api/leaderboard ----------------------------------------//  @RequestMapping("/leaderboard")  public List<Object> getLeaderboard() {    return playerRepository        .findAll()        .stream()        .map(Player::createScoreDTO)        .collect(Collectors.toList());  }}