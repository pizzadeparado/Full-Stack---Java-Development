package com.codeoftheweb.salvo.controller;import com.codeoftheweb.salvo.model.*;import com.codeoftheweb.salvo.repository.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AnonymousAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.web.bind.annotation.*;import java.time.LocalDateTime;import java.util.*;import java.util.stream.*;@RestController@RequestMapping("/api")public class SalvoController {  @Autowired  private GameRepository gameRepository;  @Autowired  private PlayerRepository playerRepository;  @Autowired  private GamePlayerRepository gamePlayerRepository;  @Autowired  private ShipRepository shipRepository;  @Autowired  PasswordEncoder passwordEncoder;  private Map<String, Object> makeMap(String key, Object value) {    Map<String, Object> map = new HashMap<>();    map.put(key, value);    return map;  }  private Map<String, Object> gameViewDTO(GamePlayer gamePlayer) {    Map<String, Object> dto = new LinkedHashMap<>();    if (gamePlayer != null) {      dto.put("ID", gamePlayer.getPlayer().getPlayerID());      dto.put("creationDate", gamePlayer.getGame().getCreationDate());      dto.put("gamePlayer", gamePlayer.getGame().getGamePlayer().stream().map(GamePlayer::createGamePlayerDTO));      dto.put("ships", gamePlayer.getShip().stream().map(Ship::createShipDTO));      dto.put("salvos", gamePlayer.getGame().getGamePlayer().stream().flatMap(gamePlayer1 -> gamePlayer1.getSalvo().stream().map(salvo -> salvo.createSalvoDTO())));    } else {      dto.put("error", "");    }    return dto;  }  private boolean Guest(Authentication authentication) {    return authentication == null || authentication instanceof AnonymousAuthenticationToken;  }  /*private boolean outOfRange(Ship ship) {    for (String cell : ship.getShipLocation()) {      if (cell == null || cell.length() < 2) {        return true;      }      char y = cell.substring(0, 1).charAt(0);      int x;      try {        x = Integer.parseInt(cell.substring(1));      } catch (NumberFormatException e) {        x = 99;      } if (x < 1 || x > 10 || y < 'A' || y > 'J') {        return true;      }    }    return false;  }*/  /*private boolean notConsecutive(Ship ship) {    Set<String> cells = ship.getShipLocation();    boolean isVertical = cells.get(0).charAt(0) != cells.get(1).charAt(0);    for (int i = 0; i < cells.size(); i ++) {      if (i < cells.size() - 1) {        if (isVertical) {          char yChar = cells.get(i).substring(0, 1).charAt(0);          char compareChar = cells.get(i + 1).substring(0, 1).charAt(0);          if (compareChar - yChar != 1) {            return true;          }        } else {          Integer xInt = Integer.parseInt(cells.get(i).substring(1));          Integer compareInt = Integer.parseInt(cells.get(i + 1).substring(1));          if (compareInt - xInt != 1) {            return true;          }        }      }      for (int j = i + 1; j < cells.size(); j ++) {        if (isVertical) {          if (!cells.get(i).substring(1).equals(cells.get(j).substring(1))) {            return true;          }        } else {          if (!cells.get(i).substring(0, 1).equals(cells.get(j).substring(0, 1))) {            return true;          }        }      }    }    return false;  }  private boolean areOverlapped(Set<Ship> ships) {    Set<String> allCells = new HashSet<>();    ships.forEach(ship -> allCells.addAll(ship.getShipLocation()));    for (int i = 0; i < allCells.size(); i ++) {      for (int j = i + 1; j < allCells.size(); j ++) {        if (allCells.get(i).equals(allCells.get(j))) {          return true;        }      }    }    return false;  }*/  //---------------------------------------- loadGames ----------------------------------------//  @RequestMapping("/games")  public Map<String, Object> loadGames(Authentication authentication) {    Map<String, Object> dto = new LinkedHashMap<>();    if (!this.Guest(authentication)) {      dto.put("player", playerRepository.findByUserName(authentication.getName()).createPlayerDTO());    } else {      dto.put("player", "guest");    }    dto.put("games", gameRepository        .findAll()        .stream()        .map(Game::createGameDTO)        .collect(Collectors.toList()));    return dto;  }  //---------------------------------------- loadScore ----------------------------------------//  @RequestMapping("/leaderboard")  public List<Object> loadScore() {    return playerRepository        .findAll()        .stream()        .map(Player::createScoreDTO)        .collect(Collectors.toList());  }  //---------------------------------------- registration ----------------------------------------//  @RequestMapping(path = "/players", method = RequestMethod.POST)  public ResponseEntity<Map<String, Object>> registration(@RequestParam String username, @RequestParam String password) {    ResponseEntity<Map<String, Object>> response;    Player player = playerRepository.findByUserName(username);    if (username.isEmpty() || password.isEmpty()) {      response = new ResponseEntity<>(makeMap("error", "You have to choose a username."), HttpStatus.FORBIDDEN);    } else if (player != null) {      response = new ResponseEntity<>(makeMap("error", "Username already exist"), HttpStatus.FORBIDDEN);    } else {      Player newPlayer = playerRepository.save(new Player(username, passwordEncoder.encode(password)));      response = new ResponseEntity<>(makeMap("ID", newPlayer.getPlayerID()), HttpStatus.CREATED);    }    return response;  }  //---------------------------------------- createGame ----------------------------------------//  @RequestMapping(path = "/games", method = RequestMethod.POST)  public ResponseEntity<Map<String, Object>> createGame(Authentication authentication) {    ResponseEntity<Map<String, Object>> response;    Player player = playerRepository.findByUserName(authentication.getName());    if (!authentication.isAuthenticated()) {      response = new ResponseEntity<>(makeMap("error", "Not authenticated"), HttpStatus.FORBIDDEN);    }    if (player != null) {      Game newGame = gameRepository.save(new Game(new Date()));      GamePlayer newGamePlayer = gamePlayerRepository.save(new GamePlayer(player, newGame, new Date()));      response = new ResponseEntity<>(makeMap("gamePlayerID", newGamePlayer.getGamePlayerID()), HttpStatus.CREATED);    } else {      response = new ResponseEntity<>(makeMap("error", "No User Found"), HttpStatus.FORBIDDEN);    }    return response;  }  //---------------------------------------- joinGame ----------------------------------------//  @RequestMapping(path = "/games/{gameID}/players", method = RequestMethod.POST)  public ResponseEntity<Map<String, Object>> joinGame(Authentication authentication, @PathVariable long gameID) {    ResponseEntity<Map<String, Object>> response;    if (Guest(authentication)) {      response = new ResponseEntity<>(makeMap("error", "User is not authenticated"), HttpStatus.UNAUTHORIZED);    } else {      Game game = gameRepository.findById(gameID).orElse(null);      if (game == null) {        response = new ResponseEntity<>(makeMap("error", "The game doesn't exist."), HttpStatus.NOT_FOUND);      } else if (game.getGamePlayer().size() > 1) {        response = new ResponseEntity<>(makeMap("error", "Game is full."), HttpStatus.FORBIDDEN);      } else {        Player player = playerRepository.findByUserName(authentication.getName());        if (game.getGamePlayer().stream().anyMatch(gamePlayer -> gamePlayer.getPlayer().getPlayerID() == player.getPlayerID())) {          response = new ResponseEntity<>(makeMap("error", "You can't play against yourself!"), HttpStatus.FORBIDDEN);        } else {          GamePlayer newGamePlayer = gamePlayerRepository.save(new GamePlayer(player, game));          response = new ResponseEntity<>(makeMap("gamePlayerID", newGamePlayer.getGamePlayerID()), HttpStatus.CREATED);        }      }    }    return response;  }  //---------------------------------------- getGameView ----------------------------------------//  @RequestMapping("/game_view/{gamePlayerID}")  public ResponseEntity<Map<String, Object>> getGameView(@PathVariable long gamePlayerID, Authentication authentication) {    ResponseEntity<Map<String, Object>> response;    if (Guest(authentication)) {      response = new ResponseEntity<>(makeMap("error", "You must be logged in first."), HttpStatus.UNAUTHORIZED);    } else {      GamePlayer gamePlayer = gamePlayerRepository.findById(gamePlayerID).orElse(null);      Player player = playerRepository.findByUserName(authentication.getName());      if (gamePlayer == null) {        response = new ResponseEntity<>(makeMap("error", "Game doesn't exist."), HttpStatus.NOT_FOUND);      } else if (gamePlayer.getPlayer().getPlayerID() != player.getPlayerID()) {        response = new ResponseEntity<>(makeMap("error", "This isn't your game."), HttpStatus.UNAUTHORIZED);      } else {        response = new ResponseEntity<>(this.gameViewDTO(gamePlayer), HttpStatus.ACCEPTED);      }    }    return response;  }  //---------------------------------------- addShip ----------------------------------------////  @RequestMapping(path = "/games/players/{gamePlayerID}/ships", method = RequestMethod.POST)//  public ResponseEntity<Map<String, Object>> addShip(Authentication authentication, @PathVariable long gamePlayerID, @RequestBody Set<Ship> ships) {//    ResponseEntity<Map<String, Object>> response;////    if (Guest(authentication)) {//      response = new ResponseEntity<>(makeMap("error", "You must be loggedin first."), HttpStatus.UNAUTHORIZED);//    } else {//      GamePlayer gamePlayer = gamePlayerRepository.findById(gamePlayerID).orElse(null);//      Player player = playerRepository.findByUserName(authentication.getName());////      if (gamePlayer == null) {//        response = new ResponseEntity<>(makeMap("error", "Game doesn't exist."), HttpStatus.NOT_FOUND);//      } else if (gamePlayer.getPlayer().getPlayerID() != player.getPlayerID()) {//        response = new ResponseEntity<>(makeMap("error", "This is not your game."), HttpStatus.UNAUTHORIZED);//      } else if (gamePlayer.getShip().size() > 0) {//        response = new ResponseEntity<>(makeMap("error", "You've got ships!"), HttpStatus.FORBIDDEN);//      } else if (ships == null || ships.size() != 5) {//        response = new ResponseEntity<>(makeMap("error", "You must have 5 ships placed."), HttpStatus.FORBIDDEN);//      } else {//        if (ships.stream().anyMatch(this::outOfRange)) {//          response = new ResponseEntity<>(makeMap("error", "Ships are out of range."), HttpStatus.FORBIDDEN);//        } else if (ships.stream().anyMatch(this::notConsecutive)) {//          response = new ResponseEntity<>(makeMap("error", "Ships are not consecutive."), HttpStatus.FORBIDDEN);//        } else if (this.areOverlapped(ships)) {//          response = new ResponseEntity<>(makeMap("error", "Ships are overlapping."), HttpStatus.FORBIDDEN);//        } else {//          ships.forEach(ship -> gamePlayer.addShip(ship));//          gamePlayerRepository.save(gamePlayer);////          response = new ResponseEntity<>(makeMap("success", "Ships added."), HttpStatus.CREATED);//        }//      }//    }//    return response;//  }}